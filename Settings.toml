# Vouchrs Configuration
# This file contains default settings that can be overridden by environment variables

[application]
# Server bind address and port
# Environment variables: HOST, PORT
host = "0.0.0.0"
port = 8080

# Base URL for OAuth redirects (will have /oauth2/callback appended)
# Full callback URL will be: {redirect_base_url}/oauth2/callback
# Environment variable: REDIRECT_BASE_URL
redirect_base_url = "http://localhost:8080"

# CORS settings - comma-separated list of allowed origins
# Environment variable: CORS_ORIGINS
cors_origins = "http://localhost:3000,http://localhost:8080"

[proxy]
# Upstream service URL
# Environment variable: UPSTREAM_URL
upstream_url = "http://localhost:3000"

[static_files]
# Directory containing static assets (HTML, CSS, JS, images)
# Environment variable: STATIC_FOLDER_PATH
assets_folder = "src/static"

[session]
# Session cookie expiration in hours (how long browser keeps the cookie)
# Environment variable: SESSION_DURATION_HOURS
session_duration_hours = 168

# Session validity in hours (how long the actual session remains valid)
# This is separate from cookie lifetime and provides additional security
# Environment variable: SESSION_EXPIRATION_HOURS
# Recommended: 1 hour for security, can be extended via token refresh
session_expiration_hours = 1

# Session refresh interval in hours. If 0, session refresh is disabled.
# When enabled, the session cookie's expiration will be extended by this
# amount each time the user makes a request, keeping active users logged in.
# Environment variable: SESSION_REFRESH_HOURS
# Recommended values: 0 (disabled), 1 (1 hour), 2 (2 hours)
session_refresh_hours = 0

# Session secret for encrypting session cookies
# Environment variable: SESSION_SECRET
# If not set, a random secret will be generated automatically (not recommended for production)
#
# Generate a secure 256-bit secret using one of these methods:
# OpenSSL: openssl rand -base64 32
# Python:  python3 -c "import secrets, base64; print(base64.b64encode(secrets.token_bytes(32)).decode())"
# Node.js: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
session_secret = ""

# JWT issuer claim (iss) - identifies who issued the token
# Environment variable: JWT_ISSUER
issuer = "https://vouchrs.app"

# JWT audience claim (aud) - identifies the intended recipient of the token
# Environment variable: JWT_AUDIENCE
audience = "https://api.example.com"

[cookies]
# Cookie security settings
# Environment variable: COOKIE_SECURE
secure = false

[logging]
# Logging level: error, warn, info, debug, trace
# Environment variable: RUST_LOG
level = "info"

# OAuth Provider Configuration
# At least one provider must be configured for Vouchrs to start
# Each provider can be customized with discovery URLs, custom endpoints, scopes, etc.
# 
# Secret values can be set directly in this file OR via environment variables
# Environment variables take precedence over direct values

[[providers]]
name = "google"
display_name = "Google"
discovery_url = "https://accounts.google.com/.well-known/openid-configuration"
signout_url = "https://accounts.google.com/logout"
scopes = ["openid", "email", "profile"]
# Direct values (use for development/testing - NOT recommended for production)
# client_id = "your-google-client-id.googleusercontent.com"
# client_secret = "your-google-client-secret"
# Environment variable overrides (recommended for production)
client_id_env = "GOOGLE_CLIENT_ID"
client_secret_env = "GOOGLE_CLIENT_SECRET"
enabled = true
extra_auth_params = { access_type = "offline", prompt = "consent" }

[[providers]]
name = "apple"
display_name = "Apple"
discovery_url = "https://appleid.apple.com/.well-known/openid-configuration"
scopes = ["openid", "email", "name"]
# Direct values (use for development/testing - NOT recommended for production)
# client_id = "com.yourcompany.yourapp"
# Environment variable overrides (recommended for production)
client_id_env = "APPLE_CLIENT_ID"
enabled = true
extra_auth_params = { response_mode = "form_post" }
# JWT signing configuration for Apple
# Direct values
# team_id = "ABCD123456", key_id = "XYZ987654", private_key_path = "/path/to/apple-private-key.p8"
# Environment variable overrides (recommended for production)
jwt_signing = { team_id_env = "APPLE_TEAM_ID", key_id_env = "APPLE_KEY_ID", private_key_path_env = "APPLE_PRIVATE_KEY_PATH" }

[[providers]]
name = "microsoft"
display_name = "Microsoft"
discovery_url = "https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration"
scopes = ["openid", "email", "profile"]
# Example: Using direct values for development
client_id = "dev-microsoft-client-id"
client_secret = "dev-microsoft-client-secret"
# Environment variable overrides (will take precedence if set)
client_id_env = "MICROSOFT_CLIENT_ID"
client_secret_env = "MICROSOFT_CLIENT_SECRET"
enabled = false  # Set to true to enable
extra_auth_params = { response_type = "code", response_mode = "query" }
