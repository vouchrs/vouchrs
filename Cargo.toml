[package]
name = "vouchrs"
version = "0.3.7"
edition = "2021"
description = "A lightweight, high-performance OIDC reverse proxy built in Rust"
license = "MIT"
authors = ["Michael Burch <me@michaelburch.net>"]
repository = "https://github.com/vouchrs/vouchrs"
homepage = "https://github.com/vouchrs/vouchrs"
documentation = "https://docs.rs/vouchrs"
keywords = ["oidc", "oauth2", "authentication", "proxy", "rust", "actix-web"]
categories = ["authentication", "web-programming"]

# Optimize for smaller binaries
[profile.release]
opt-level = "z"   # Optimize for size instead of speed
lto = true        # Enable Link Time Optimization
codegen-units = 1 # Better optimization with single codegen unit
panic = "abort"   # Don't include stack unwinding code
strip = true      # Strip symbols from binary

[features]
default = ["passkeys"]
passkeys = ["dep:ciborium", "dep:cbor-codec"]
testing = []                                  # Enable testing utilities for integration tests

# Clippy configuration - pedantic mode with warnings as errors
[lints.clippy]
# Lint groups with lower priority so individual lints can override them
pedantic = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }
# Treat all warnings as errors
all = { level = "deny", priority = -1 }
# Allow some cargo lints that might be out of our control
multiple_crate_versions = "allow"

[dependencies]
# Core web framework
actix-web = { version = "4.4", default-features = false, features = [
    "macros",
    "compress-gzip",
    "cookies",
] }
actix-cors = { version = "0.7", default-features = false }
tokio = { version = "1.0", default-features = false, features = [
    "macros",
    "rt-multi-thread",
] }

# Serialization
serde = { version = "1.0", default-features = false, features = ["derive"] }
serde_json = { version = "1.0", default-features = false }
basic-toml = { version = "0.1", default-features = false }


# HTTP client
reqwest = { version = "0.12.19", default-features = false, features = [
    "json",
    "rustls-tls",
] }
url = { version = "2.4", default-features = false }

# Utilities
async-trait = { version = "0.1", default-features = false }
base64 = { version = "0.22", default-features = false }
chrono = { version = "0.4", default-features = false, features = [
    "serde",
    "std",
    "clock",
] }
anyhow = { version = "1.0", default-features = false }
thiserror = { version = "1.0", default-features = false }
log = { version = "0.4", default-features = false }
env_logger = { version = "0.11", default-features = false }
regex = { version = "1.10", default-features = false, features = [
    "unicode-case",
    "unicode-perl",
] }
once_cell = { version = "1.19", default-features = false }

# Crypto (keep these for security)
aes-gcm = { version = "0.10", default-features = false, features = [
    "aes",
    "alloc",
] }
p256 = { version = "0.14.0-pre.4", default-features = false, features = [
    "ecdsa",
    "pem",
    "pkcs8",
] }
# SECURITY NOTE: RSA 0.9.8 has RUSTSEC-2023-0071 (Marvin Attack timing sidechannel vulnerability)
# Risk Assessment: Medium (CVSS 5.9) - affects RSA signature verification operations
# Mitigation Status:
# - Version 0.10.0-rc.0 has breaking API changes requiring significant refactoring
# - Vulnerability requires network-level timing attack access to JWT verification endpoint
# - Application uses RSA only for OIDC JWT signature verification (read-only operations)
# - No RSA private key operations exposed that could leak key material
# Decision: Accept risk until stable patched version (0.10.0+) is available
# Tracked in: https://github.com/RustCrypto/RSA/issues/390
rsa = { version = "0.9", default-features = false, features = ["sha2", "pem"] }
hmac = { version = "0.12", default-features = false }
sha2 = { version = "0.10", default-features = false }
rand = { version = "0.9", default-features = false, features = [
    "std",
    "std_rng",
] }
urlencoding = "2.1.3"

# OpenSSL with vendored support for static linking
openssl = { version = "0.10", features = ["vendored"] }

# WebAuthn dependencies
ciborium = { version = "0.2", optional = true }
cbor-codec = { version = "0.7", optional = true }
ring = "0.17.14"
webauthn-rs = { version = "0.5.1", features = [
    "danger-allow-state-serialisation",
    "danger-credential-internals",
] }
webauthn-rs-proto = "0.5.1" # For direct access to WebAuthn protocol structures
uuid = { version = "1.17.0", features = ["v4"] }

[dev-dependencies]
serial_test = "3.2.0"
tempfile = "3.20.0"

# Integration tests require the testing feature to access test utilities
[[test]]
name = "integration_test"
required-features = ["testing"]

[[test]]
name = "integration_validation_tests"
required-features = ["testing"]

[[test]]
name = "apple_jwt_integration_test"
required-features = ["testing"]
