name: Generate Changelog

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to generate changelog for (leave empty for unreleased)'
        required: false
        type: string

jobs:
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff@2.9.1

      - name: Generate changelog
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Generate changelog for the new release
            git cliff --config ./cliff.toml --tag ${{ github.event.release.tag_name }} --output CHANGELOG.md
          elif [[ -n "${{ github.event.inputs.tag }}" ]]; then
            # Generate changelog for specific tag
            git cliff --config ./cliff.toml --tag ${{ github.event.inputs.tag }} --output CHANGELOG.md
          else
            # Generate changelog for unreleased changes
            git cliff --config ./cliff.toml --unreleased --tag unreleased --output CHANGELOG.md
          fi

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changelog
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if [[ "${{ github.event_name }}" == "release" ]]; then
            git commit -m "docs: update changelog for ${{ github.event.release.tag_name }}"
          else
            git commit -m "docs: update changelog"
          fi

      - name: Push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Update release notes
        if: github.event_name == 'release' && steps.verify-changed-files.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');

            // Extract the section for this release
            const lines = changelog.split('\n');
            let releaseNotes = '';
            let inReleaseSection = false;
            let foundFirstRelease = false;

            for (const line of lines) {
              if (line.startsWith('## [') && !foundFirstRelease) {
                foundFirstRelease = true;
                inReleaseSection = true;
                continue; // Skip the release header
              } else if (line.startsWith('## [') && foundFirstRelease) {
                break; // We've hit the next release, stop
              }

              if (inReleaseSection) {
                releaseNotes += line + '\n';
              }
            }

            // Clean up the release notes
            releaseNotes = releaseNotes.trim();

            if (releaseNotes) {
              // Get current release
              const release = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id
              });

              // Update release with generated changelog
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                body: releaseNotes + '\n\n' + (release.data.body || '')
              });
            }
