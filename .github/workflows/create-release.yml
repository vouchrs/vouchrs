name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format. Use semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "❌ Tag v${{ github.event.inputs.version }} already exists"
            exit 1
          fi

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff@2.9.1

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Update Cargo.toml version
        run: |
          cargo set-version "${{ github.event.inputs.version }}"
          echo "✅ Updated Cargo.toml version to ${{ github.event.inputs.version }}"

      - name: Generate changelog
        run: |
          git cliff --tag "v${{ github.event.inputs.version }}" --output CHANGELOG.md
          echo "✅ Generated changelog for v${{ github.event.inputs.version }}"

      - name: Extract release notes
        id: release_notes
        run: |
          # Extract the section for this release from the changelog
          version="${{ github.event.inputs.version }}"

          # Read the changelog and extract the current version section
          if [ -f CHANGELOG.md ]; then
            # Find the section for this version and extract it
            awk -v version="$version" '
              /^## \[/ {
                if (found) exit
                if ($0 ~ "\\[" version "\\]") {
                  found=1
                  next
                }
              }
              found && /^## \[/ { exit }
              found { print }
            ' CHANGELOG.md > release_notes.txt

            # If we got content, use it
            if [ -s release_notes.txt ]; then
              echo "Generated release notes from changelog"
              cat release_notes.txt
            else
              echo "No release notes found in changelog, generating default"
              echo "Release v$version" > release_notes.txt
            fi
          else
            echo "No changelog found, generating default release notes"
            echo "Release v$version" > release_notes.txt
          fi

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml CHANGELOG.md Cargo.lock
          git commit -m "chore(release): prepare for v${{ github.event.inputs.version }}"

      - name: Create release branch
        run: |
          RELEASE_BRANCH="release/v${{ github.event.inputs.version }}"
          git checkout -b $RELEASE_BRANCH
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV

      # We'll create the tag after the PR is merged
      # This is done by the main-release.yml workflow

      - name: Push release branch
        run: |
          git push origin ${{ env.RELEASE_BRANCH }}

      - name: Create pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prBody = `This PR was automatically created by the create-release workflow.

### Changes:
- Updates the version in Cargo.toml to ${{ github.event.inputs.version }}
- Updates the CHANGELOG.md file based on conventional commits

### What happens when this PR is merged:
- The main-release workflow will run automatically on merge
- It will create the tag v${{ github.event.inputs.version }}
- It will create a GitHub release with the changelog
- It will build and push Docker images with appropriate tags
- Pre-release status: ${{ github.event.inputs.pre_release == 'true' ? 'Yes' : 'No' }}

### 🚨 Important:
- Do not push directly to main, all changes must go through a PR
- This PR prepares the repository for a new release
- Review the changelog and version number before merging`;

            const result = await github.rest.pulls.create({
              owner,
              repo,
              title: 'chore(release): prepare for v${{ github.event.inputs.version }}',
              body: prBody,
              head: '${{ env.RELEASE_BRANCH }}',
              base: 'main'  // Always create PRs to main branch
            });

            console.log(`Pull request created: ${result.data.html_url}`);

            // Add next steps comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: result.data.number,
              body: '## PR Workflow for Releases\n\n1. Review the changes in this PR\n2. Approve and merge the PR\n3. The main-release workflow will automatically run to create the release tag and publish Docker images\n4. No manual workflow runs are needed anymore!'
            });
            console.log(`Pull request created: ${result.data.html_url}`);

      # Release creation moved to main-release workflow
      # We'll only create the PR here, and the main-release workflow will handle:
      # 1. Creating the tag
      # 2. Creating the GitHub release
      # 3. Building and pushing Docker images

  # build-release job removed
  # The Docker image building and release creation will be handled by main-release workflow
  # after the PR is merged to main
