name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to tag the Docker image with'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (build but do not push)'
        required: false
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag the Docker image with (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (build but do not push)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  build-docker:
    runs-on: ubuntu-latest
    # Use higher-spec runner for faster builds if available
    # runs-on: ubuntu-latest-4-cores  # Uncomment if using GitHub Teams/Enterprise
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Use docker-container driver for better caching and multiplatform support
          driver: docker-container
          # Enable experimental features like cache mounts
          buildkitd-flags: --allow-insecure-entitlement network.host --allow-insecure-entitlement security.insecure

      - name: Login to GitHub Container Registry
        if: inputs.dry_run == false
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version parts
        id: version_parts
        run: |
          VERSION="${{ inputs.version }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "major=$(echo ${VERSION} | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo ${VERSION} | cut -d. -f1-2)" >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: cache_key
        run: |
          # Create a cache key based on Cargo files for better cache invalidation
          CARGO_HASH=$(sha256sum Cargo.toml Cargo.lock | sha256sum | cut -d' ' -f1)
          echo "cargo-hash=${CARGO_HASH}" >> $GITHUB_OUTPUT
          echo "cache-key=rust-deps-${CARGO_HASH}" >> $GITHUB_OUTPUT

      - name: Pre-warm registry cache
        if: inputs.dry_run == false
        run: |
          # Pull existing cache images to warm up the local cache
          docker pull ghcr.io/${{ github.repository }}:cache || true
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.major }}-cache || true
          docker pull ghcr.io/${{ github.repository }}:buildcache-${{ steps.cache_key.outputs.cargo-hash }} || true

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.dry_run == false }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.version }}
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.major }}
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.minor }}
            ghcr.io/${{ github.repository }}:latest
          labels: |
            org.opencontainers.image.title=Vouchrs
            org.opencontainers.image.description=A lightweight, high-performance OIDC reverse proxy built in Rust
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.version_parts.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.pushed_at || github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
          # Multi-layered caching strategy for maximum efficiency
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/${{ github.repository }}:cache
            type=registry,ref=ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.major }}-cache
            type=registry,ref=ghcr.io/${{ github.repository }}:buildcache-${{ steps.cache_key.outputs.cargo-hash }}
          cache-to: |
            type=gha,mode=max
            type=registry,ref=ghcr.io/${{ github.repository }}:cache,mode=max
            type=registry,ref=ghcr.io/${{ github.repository }}:buildcache-${{ steps.cache_key.outputs.cargo-hash }},mode=max
          # Enable build-time variables for optimization
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate artifact attestation
        if: inputs.dry_run == false
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Display build information
        run: |
          echo "🏗️ Build Summary:"
          echo "📦 Version: ${{ steps.version_parts.outputs.version }}"
          echo "🏷️ Tags: ${{ steps.version_parts.outputs.major }}, ${{ steps.version_parts.outputs.minor }}, latest"
          echo "🏛️ Platforms: linux/amd64, linux/arm64"
          echo "🔧 Cache key: ${{ steps.cache_key.outputs.cache-key }}"
          echo "📝 Digest: ${{ steps.build.outputs.digest }}"
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "🔍 Mode: Dry run (not pushed to registry)"
          else
            echo "✅ Mode: Built and pushed to registry"
          fi

      - name: Notify successful build
        if: inputs.dry_run == false
        run: |
          echo "🎉 Successfully built and pushed Docker images for v${{ steps.version_parts.outputs.version }}"
          echo "📦 Docker images available at: ghcr.io/${{ github.repository }}"
          echo "🔒 Built with artifact attestation for supply chain security"
          echo "⚡ Optimized caching enabled for faster subsequent builds"
