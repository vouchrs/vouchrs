name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to tag the Docker image with'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (build but do not push)'
        required: false
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag the Docker image with (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (build but do not push)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: inputs.dry_run == false
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pre-warm build cache
        if: inputs.dry_run == false
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          target: builder
          platforms: linux/amd64
          push: false
          cache-from: |
            type=gha,scope=vouchrs-deps
            type=registry,ref=ghcr.io/${{ github.repository }}:cache-deps
          cache-to: |
            type=gha,mode=max,scope=vouchrs-deps

      - name: Pre-warm build cache (dry-run)
        if: inputs.dry_run == true
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          target: builder
          platforms: linux/amd64
          push: false
          cache-from: type=gha,scope=vouchrs-deps
          cache-to: type=gha,mode=max,scope=vouchrs-deps

      - name: Extract version parts
        id: version_parts
        run: |
          VERSION="${{ inputs.version }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "major=$(echo ${VERSION} | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo ${VERSION} | cut -d. -f1-2)" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        id: build
        if: inputs.dry_run == false
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.version }}
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.major }}
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.minor }}
            ghcr.io/${{ github.repository }}:latest
          labels: |
            org.opencontainers.image.title=Vouchrs
            org.opencontainers.image.description=A lightweight, high-performance OIDC reverse proxy built in Rust
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.version_parts.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.pushed_at || github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
          cache-from: |
            type=gha,scope=vouchrs-deps
            type=gha,scope=vouchrs-release
          cache-to: |
            type=gha,mode=max,scope=vouchrs-release

      - name: Build Docker Image (dry-run)
        id: build-dry-run
        if: inputs.dry_run == true
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.version }}
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.major }}
            ghcr.io/${{ github.repository }}:${{ steps.version_parts.outputs.minor }}
            ghcr.io/${{ github.repository }}:latest
          labels: |
            org.opencontainers.image.title=Vouchrs
            org.opencontainers.image.description=A lightweight, high-performance OIDC reverse proxy built in Rust
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.version_parts.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.pushed_at || github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
          cache-from: |
            type=gha,scope=vouchrs-deps
            type=gha,scope=vouchrs-release
          cache-to: |
            type=gha,mode=max,scope=vouchrs-release

      - name: Generate artifact attestation
        if: inputs.dry_run == false
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Notify successful build
        if: inputs.dry_run == false
        run: |
          echo "ðŸŽ‰ Successfully built and pushed Docker images for v${{ steps.version_parts.outputs.version }}"
          echo "ðŸ“¦ Docker images available at: ghcr.io/${{ github.repository }}"
          echo "ðŸ”’ Built with artifact attestation for supply chain security"

      - name: Notify dry-run completion
        if: inputs.dry_run == true
        run: |
          echo "ðŸ§ª Dry-run completed successfully for v${{ steps.version_parts.outputs.version }}"
          echo "ðŸ“¦ Docker images were built but not pushed (dry-run mode)"
          echo "âœ… Build verification completed"
